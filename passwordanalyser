import re
import time

# List of common passwords (for demonstration; in practice, use a larger database)
COMMON_PASSWORDS = {"password", "123456", "qwerty", "admin", "letmein"}

def analyze_password(password):
    """
    Analyzes the strength of a password and returns a score and feedback.
    """
    score = 0
    feedback = []

    # Check length
    length = len(password)
    if length < 8:
        feedback.append("Password is too short. Use at least 8 characters.")
    elif length >= 8 and length < 12:
        score += 20
        feedback.append("Good length, but consider making it longer.")
    else:
        score += 40
        feedback.append("Great length!")

    # Check character variety
    if re.search(r"[a-z]", password):
        score += 15
    else:
        feedback.append("Add lowercase letters.")

    if re.search(r"[A-Z]", password):
        score += 15
    else:
        feedback.append("Add uppercase letters.")

    if re.search(r"[0-9]", password):
        score += 15
    else:
        feedback.append("Add numbers.")

    if re.search(r"[!@#$%^&*(),.?\":{}|<>]", password):
        score += 15
    else:
        feedback.append("Add special characters (e.g., !, @, #).")

    # Check against common passwords
    if password.lower() in COMMON_PASSWORDS:
        score = 0
        feedback = ["This is a very common password! Choose something unique."]
        return score, feedback

    # Cap the score at 100
    score = min(score, 100)

    # General strength feedback
    if score < 40:
        feedback.insert(0, "Weak password.")
    elif score < 70:
        feedback.insert(0, "Moderate password.")
    else:
        feedback.insert(0, "Strong password!")

    return score, feedback

def estimate_crack_time(password):
    """
    Rough estimate of time to crack the password based on character set and length.
    Assumes 10 billion guesses per second (modern GPU cracking speed).
    """
    char_set = 0
    if re.search(r"[a-z]", password):
        char_set += 26
    if re.search(r"[A-Z]", password):
        char_set += 26
    if re.search(r"[0-9]", password):
        char_set += 10
    if re.search(r"[!@#$%^&*(),.?\":{}|<>]", password):
        char_set += 20

    if char_set == 0:
        return "Instantly crackable (empty or invalid)."

    # Total possible combinations: char_set^length
    combinations = char_set ** len(password)
    seconds = combinations / 10_000_000_000  # 10 billion guesses per second

    if seconds < 60:
        return f"{seconds:.2f} seconds"
    elif seconds < 3600:
        return f"{seconds / 60:.2f} minutes"
    elif seconds < 86400:
        return f"{seconds / 3600:.2f} hours"
    else:
        return f"{seconds / 86400:.2f} days"

def main():
    print("Password Strength Analyzer")
    print("-------------------------")
    
    while True:
        password = input("Enter a password to analyze (or 'quit' to exit): ")
        if password.lower() == "quit":
            break

        # Analyze the password
        score, feedback = analyze_password(password)
        crack_time = estimate_crack_time(password)

        # Display results
        print(f"\nScore: {score}/100")
        print(f"Estimated time to crack: {crack_time}")
        print("Feedback:")
        for line in feedback:
            print(f"- {line}")
        print()

if __name__ == "__main__":
    main()
