import requests
from bs4 import BeautifulSoup
import re
from urllib.parse import urljoin, urlparse
import sys

# Headers to mimic a browser
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
}

# Common sensitive files/directories to check
SENSITIVE_FILES = [
    "/admin", "/login", "/wp-admin", "/phpmyadmin", "/config.php", 
    "/.htaccess", "/robots.txt", "/backup.zip", "/db.sql"
]

# Simple payloads for testing (safe for educational use; donâ€™t misuse)
SQL_INJECTION_PAYLOADS = ["' OR 1=1 --", "1; DROP TABLE users --"]
XSS_PAYLOADS = ["<script>alert('xss')</script>", "<img src=x onerror=alert('xss')>"]

def check_server_headers(url):
    """Check server headers for outdated software or misconfigurations."""
    try:
        response = requests.get(url, headers=HEADERS, timeout=5)
        server = response.headers.get("Server", "Not disclosed")
        x_powered_by = response.headers.get("X-Powered-By", "Not disclosed")

        print(f"[*] Server: {server}")
        print(f"[*] X-Powered-By: {x_powered_by}")

        # Check for outdated or vulnerable software (basic check)
        if "Apache/2.2" in server or "nginx/1.10" in server:
            print("[!] Warning: Outdated server version detected.")
        if "PHP/5" in x_powered_by:
            print("[!] Warning: Outdated PHP version detected.")
    except Exception as e:
        print(f"[!] Error checking headers: {e}")

def check_sensitive_files(url):
    """Check for exposed sensitive files or directories."""
    print("\n[*] Checking for sensitive files/directories...")
    for path in SENSITIVE_FILES:
        test_url = urljoin(url, path)
        try:
            response = requests.get(test_url, headers=HEADERS, timeout=5)
            if response.status_code == 200:
                print(f"[!] Vulnerable: {test_url} is accessible!")
            elif response.status_code == 403:
                print(f"[*] {test_url} is forbidden (may still exist).")
        except Exception:
            continue

def check_sql_injection(url):
    """Test for basic SQL injection vulnerabilities."""
    print("\n[*] Testing for SQL Injection...")
    parsed_url = urlparse(url)
    if not parsed_url.query:
        print("[*] No query parameters found to test.")
        return

    base_url = f"{parsed_url.scheme}://{parsed_url.netloc}{parsed_url.path}"
    params = dict([p.split("=") for p in parsed_url.query.split("&")])

    for payload in SQL_INJECTION_PAYLOADS:
        for param in params:
            test_params = params.copy()
            test_params[param] = payload
            test_url = f"{base_url}?{'&'.join([f'{k}={v}' for k, v in test_params.items()])}"
            try:
                response = requests.get(test_url, headers=HEADERS, timeout=5)
                if "sql" in response.text.lower() or "mysql" in response.text.lower():
                    print(f"[!] Potential SQL Injection: {test_url}")
                else:
                    print(f"[*] {test_url} - No obvious SQL error detected.")
            except Exception as e:
                print(f"[!] Error testing {test_url}: {e}")

def check_xss(url):
    """Test for basic XSS vulnerabilities."""
    print("\n[*] Testing for XSS...")
    try:
        response = requests.get(url, headers=HEADERS, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        forms = soup.find_all("form")

        if not forms:
            print("[*] No forms found to test for XSS.")
            return

        for form in forms:
            action = form.get("action")
            method = form.get("method", "get").lower()
            inputs = form.find_all("input")
            target_url = urljoin(url, action) if action else url

            for payload in XSS_PAYLOADS:
                data = {}
                for input_tag in inputs:
                    if input_tag.get("name"):
                        data[input_tag["name"]] = payload

                if method == "post":
                    response = requests.post(target_url, data=data, headers=HEADERS, timeout=5)
                else:
                    response = requests.get(target_url, params=data, headers=HEADERS, timeout=5)

                if payload in response.text:
                    print(f"[!] Potential XSS: {target_url} reflected payload: {payload}")
                else:
                    print(f"[*] {target_url} - No XSS detected with {payload}")
    except Exception as e:
        print(f"[!] Error testing XSS: {e}")

def scan_website(url):
    """Main function to run the vulnerability scan."""
    if not url.startswith("http"):
        url = "http://" + url

    print(f"[*] Scanning {url}...")
    print("---------------------")

    check_server_headers(url)
    check_sensitive_files(url)
    check_sql_injection(url)
    check_xss(url)

    print("\n[*] Scan completed.")

def main():
    print("Website Vulnerability Scanner")
    print("----------------------------")
    
    if len(sys.argv) > 1:
        url = sys.argv[1]
    else:
        url = input("Enter website URL to scan (e.g., http://example.com): ")
    
    scan_website(url)

if __name__ == "__main__":
    main()
